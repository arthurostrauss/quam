[tool.poetry]
name = "quam-components"
packages = [{ include = "quam_components" }]
include = ["LICENSE.md"]
exclude = ["**/tests/**", "**/conftest.py/**"]
version = "0.1.0"
description = "Quantum Abstract Machine (QuAM) software development kit (SDK) facilitates development of abstraction layers in experiments."
authors = ["Serwan Asaad <serwan.asaad@quantum-machines.co>"]
license = "BSD-3-Clause"
maintainers = ["Serwan Asaad <serwan.asaad@quantum-machines.co>"]
readme = "README.md"

classifiers = [
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: BSD License",
]

keywords = [
    "quantum-computing",
    "experiment-control",
    "quantum-infrastructure",
    "abstraction-layer",
    "abstraction-library",
]

documentation = "https://entropy-lab.io/latest/quam_sdk"
repository = "https://github.com/entropy-lab/quam-sdk"

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
numpy = "^1.21.2"
# jsonschema = "^4.14.0"
# pydantic = "^1.9.2"
# rich = "^12.5.1"
# rich-click = "^1.6.1"
# pyyaml = "^6.0"
qualang-tools = "^0.15.0"
typeguard = "^4.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.1.2"
black = "^23.7.0"
# pytest-cov = "^3.0.0"
# black = "^22.3.0"
flake8 = "^5.0.1"
pyproject-flake8 = "^5.0.0"
# flake8-bugbear = "^22.4.25"
# poethepoet = "^0.10.0"
# typing-extensions = "^4.3.0"
# coverage = "^6.4.4"
ipykernel = "^6.24.0"
pytest-cov = "^4.1.0"

[tool.black]
target-version = ["py38"]
line-length = 88
preview = true

[tool.flake8]
max-line-length = 88

# [tool.poe.tasks.check-format]
# cmd = "black . --check --line-length 80"
# help = "Format source files according to the style rules"


# [tool.poe.tasks.format]
# cmd = "black . --line-length 80"
# help = "Format source files according to the style rules"

# [tool.poe.tasks.lint]
# cmd = "flake8 ."
# help = "Check for lint errors"

# [tool.poe.tasks.test]
# cmd = "pytest"
# help = "Run all unit tests"

# [tool.poe.tasks.check]
# sequence = ["check-format", "lint", "test"]
# help = "Run format and all checks on the code"

[build-system]
requires = ["poetry"]
build-backend = "poetry.masonry.api"


#### Alternative installation using setuptools instead of poetry
### Must comment out previous [build-system]

# [project]
# name = "quam-components"
# version = "0.1"

# [build-system]
# requires = ["setuptools"]
# build-backend = "setuptools.build_meta"

# [tool.setuptools]
# packages = ["quam_components"]